// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  polls         Poll[]
  Votes         Votes[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Poll {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  expires_at DateTime?
  userId     String?
  User       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question?
  answer     Answer[]
  votes      Votes[]

  @@index([userId])
}

model Question {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  title      String
  poll       Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId     String   @unique // relation scalar field (used in the `@relation` attribute above)
}

model Answer {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  title      String
  poll       Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId     String
  Votes      Votes[]

  @@index([pollId])
}

model Votes {
  id       String  @id @default(cuid())
  Poll     Poll    @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId   String
  userIp   String?
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
  answer   Answer  @relation(fields: [answerId], references: [id])
  answerId String

  @@index([pollId])
  @@index([userId])
  @@index([answerId])
}
